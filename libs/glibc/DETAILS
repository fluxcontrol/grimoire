. "$GRIMOIRE/FUNCTIONS"
           SPELL=glibc
           TMPFS=off
if  [  "$GLIBC_NPTL"  =  "n"  ];  then
         VERSION=2.3.6
 HEADERS_VERSION=2.4.24
          SOURCE=$SPELL-$VERSION.tar.bz2
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-$VERSION
         SOURCE2=$SOURCE.sig
         SOURCE3=glibc-linuxthreads-$VERSION.tar.bz2
         SOURCE4=$SOURCE3.sig
         SOURCE5=$HEADERS_VERSION-kernel-headers.tar.bz2
   SOURCE_URL[0]=$GNU_URL/$SPELL/$SOURCE
  SOURCE2_URL[0]=${SOURCE_URL[0]}.sig
  SOURCE3_URL[0]=$GNU_URL/$SPELL/$SOURCE3
  SOURCE4_URL[0]=${SOURCE3_URL[0]}.sig
  SOURCE5_URL[0]=http://download.sourcemage.org/mirror/$SOURCE5
      SOURCE_GPG=gnu.gpg:$SOURCE.sig:UPSTREAM_KEY
  SOURCE2_IGNORE=signature
     SOURCE3_GPG=gnu.gpg:$SOURCE3.sig:UPSTREAM_KEY
  SOURCE4_IGNORE=signature
    SOURCE5_HASH=sha512:c1931495915c8461de97e4156c9d0edd7b44e4b48cbce2d4c3a52b83d331a9ce48f3c7abb7dd787ed897f1e7d0e81c5cdb4eb3986bc24a5e2788708427e2dcb1
else
  if [[ "${GLIBC_BRANCH}" == "scm" ]]; then
         VERSION=$(get_scm_version)
  FORCE_DOWNLOAD=on
          SOURCE=$SPELL-git.tar.bz2
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-git
      SOURCE_URL="git://sourceware.org/git/glibc.git:$SPELL-git"
   SOURCE_IGNORE=volatile
  else
         VERSION=2.22
         SOURCE=$SPELL-$VERSION.tar.xz
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-$VERSION
         SOURCE2=$SOURCE.sig
   SOURCE_URL[0]=$GNU_URL/$SPELL/$SOURCE
  SOURCE2_URL[0]=${SOURCE_URL[0]}.sig
      SOURCE_GPG=glibc.gpg:$SOURCE.sig:UPSTREAM_KEY
  SOURCE2_IGNORE=signature
  SECURITY_PATCH=6
  fi
  if [[ $GLIBC_SANITIZE_HEADERS == n ]]; then
 HEADERS_VERSION=3.17.4
         SOURCE3=linux-${HEADERS_VERSION}.tar.xz
         SOURCE6=linux-${HEADERS_VERSION}.tar.sign
  SOURCE6_IGNORE=signature
     SOURCE3_GPG="kernel.gpg:${SOURCE6}:ESTABLISHED_UPSTREAM_KEY"
  SOURCE3_URL[0]="$KERNEL_URL/pub/linux/kernel/v3.x/$SOURCE3"
  SOURCE6_URL[0]="$KERNEL_URL/pub/linux/kernel/v3.x/$SOURCE6"
  else
    local LINUX_DIRECTORY
 LINUX_DIRECTORY=$(gaze where -path linux | sed "s/linux -> //")
    . $LINUX_DIRECTORY/latest.defaults

    case $(uname -r) in
       2.*)
 HEADERS_VERSION=$(echo $LATEST_maintenance_patches | sed "s/patch-//")
 HEADERS_VERSION=${HEADERS_VERSION:-$LATEST_2_6}
         SOURCE3=linux-${LATEST_2_6}.tar.bz2
         SOURCE6="${SOURCE3}.sign"
    HEADERS_VDIR=v2.6
         ;;
       3.*)
 HEADERS_VERSION=$(echo $LATEST_maintenance_patches_3 | sed "s/patch-//")
 HEADERS_VERSION=${HEADERS_VERSION:-$LATEST_3}
         SOURCE3=linux-${LATEST_3}.tar.xz
      if [[ $HEADERS_VERSION = 3.0* ]]; then
         SOURCE6="${SOURCE3}.sign"
      else
         SOURCE6="linux-${LATEST_3}.tar.sign"
      fi
    HEADERS_VDIR=v3.x
      if [[ ${HEADERS_VERSION} != $LATEST_3 ]]; then
         SOURCE7=patch-${HEADERS_VERSION}.xz
        if [[ ${HEADERS_VERSION} > 3.0.4 ]]; then
         SOURCE8="patch-${HEADERS_VERSION}.sign"
        else
         SOURCE8="${SOURCE7}.sign"
        fi
      fi
         ;;
       4.*)
 HEADERS_VERSION=$(echo $LATEST_maintenance_patches_4 | sed "s/patch-//")
 HEADERS_VERSION=${HEADERS_VERSION:-$LATEST_4}
         SOURCE3=linux-${LATEST_4}.tar.xz
         SOURCE6="linux-${LATEST_4}.tar.sign"
    HEADERS_VDIR=v4.x
      if [[ ${HEADERS_VERSION} != $LATEST_4 ]]; then
         SOURCE7=patch-${HEADERS_VERSION}.xz
         SOURCE8="patch-${HEADERS_VERSION}.sign"
      fi
         ;;
    esac

     SOURCE3_GPG="kernel.gpg:${SOURCE6}:ESTABLISHED_UPSTREAM_KEY"
     SOURCE3_URL="${KERNEL_URL}/pub/linux/kernel/$HEADERS_VDIR/${SOURCE3}"
  SOURCE6_IGNORE=signature
     SOURCE6_URL="${KERNEL_URL}/pub/linux/kernel/$HEADERS_VDIR/${SOURCE6}"

    if [[ -n $SOURCE7 ]]; then
     SOURCE7_GPG="kernel.gpg:${SOURCE8}:ESTABLISHED_UPSTREAM_KEY"
     SOURCE7_URL="${KERNEL_URL}/pub/linux/kernel/$HEADERS_VDIR/${SOURCE7}"
  SOURCE8_IGNORE=signature
     SOURCE8_URL="${KERNEL_URL}/pub/linux/kernel/$HEADERS_VDIR/${SOURCE8}"
    fi
  fi
fi
        WEB_SITE=http://www.gnu.org/software/libc
      LICENSE[0]=LGPL
      LICENSE[1]=LGPL
      LICENSE[2]=GPL
  STAGED_INSTALL=off
         ENTERED=20010922
        KEYWORDS="libs"
           SHORT="C library for use with GNU/Hurd and GNU/Linux"
cat << EOF
glibc - Library for use with GNU/Hurd and GNU/Linux.
GNU C Library is one of the most important components of the GNU Hurd
and most modern Linux distributions. It is used by almost all C programs
and provides the most essential program interface.
EOF
